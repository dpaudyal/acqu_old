/*********************************************************************
*                                                                    *
*                       ThetaEff.C                                   *
*                                                                    *
*  This ROOT macro calculates the CM theta efficiency from the       *
*  event generator input distribution and the GEANT output run       *
*  through the AcquRoot code.                                        *
*                                                                    *
*  Revision date                    Reason                           *
*  ----------------------------------------------------------------- *
*   16.09.05    Dave Hornidge       first version                    *
*   10.09.06    Dave Hornidge       updated version                  *
*   15.09.06    Dave Hornidge       including the new 3D plots       *
*		               	                                             *
**********************************************************************/

#ifdef __linux__
	#include "/home/dave/Code/lib/physics.h"
	#include "/home/dave/Code/lib/functions.h"
#elif defined( __APPLE__ )
	#include "/Users/dave/Code/lib/physics.h"
	#include "/Users/dave/Code/lib/functions.h"
#endif

gROOT->Reset();

void EffRange(Char_t tgt[2], Int_t start, Int_t end, Int_t inc)
{
	Int_t i;

	for ( i = start; i <= end; i += inc) {
		ThetaEff( tgt, i);
		c1->WaitPrimitive();
	}
}

void ThetaEff( Int_t eg, Char_t tgt[2] = "p", Char_t cond[12] = "masscorr")
{
	Int_t i, bins, yld_ev, yld_ge, lo, hi, theta_lo, theta_hi, binsize;
	Double_t eff, deff;
	Char_t name[128];

	c1 = new TCanvas( "canvas", "Set-Up Efficiency", 700, 500);

	bins = 9;
	binsize = 180/bins;

	sprintf( name, "~/geant/cb/cbsim/output/pi0/pi0_%s_%d.root", tgt, eg);
	evgen = new TFile( name);
	sprintf( name, "histograms/MonteCarlo/MCH_%s_%s_%d.root", tgt, cond, eg);
	geant = new TFile( name);

	sprintf( name, "h5");
	ev_hist = (TH1D*) evgen->Get( name);
	ev_hist->SetFillColor(46);
	ev_hist->SetLineWidth(2);
	ev_hist->Draw();

	sprintf( name, "EmPi0_TGG_ThetaCM");
	ge_hist = (TH3D*) geant->Get( name);
	TH1D *h1 = ge_hist->Project3D("x");
	h1->SetFillColor(38);
	h1->SetLineWidth(2);
	h1->Draw("same");

	yld_ge = h1->Integral();
	yld_ev = ev_hist->Integral();
	eff = (double) yld_ge/yld_ev;
	deff = sqrt( yld_ge/Sqr( yld_ev) + Sqr( yld_ge)/pow( yld_ev, 3));

	cout << " 0 ";
	cout.width(7);
	cout << yld_ev << " ";
	cout.width(7);
	cout << yld_ge << " ";
	cout.width(10);
	cout.precision(4);
	cout << eff << " ";
	cout.precision(2);
	cout.width(10);
	cout << deff << endl;

	sprintf(name, "xs/eff/det_eff_new/Eff_%s_%d.out", tgt, eg);
	ofstream outFile( name);
	outFile << " 0 ";
	outFile.width(7);
	outFile << yld_ev << " ";
	outFile.width(7);
	outFile << yld_ge << " ";
	outFile.width(10);
	outFile.precision(4);
	outFile << eff << " ";
	outFile.precision(2);
	outFile.width(10);
	outFile << deff << endl;

	for ( i = 1; i <= bins; i++) {
		theta_lo = (i-1)*binsize;
		theta_hi = i*binsize;

		lo = ev_hist->GetXaxis()->FindBin( theta_lo);
		hi = ev_hist->GetXaxis()->FindBin( theta_hi);
		yld_ev = ev_hist->Integral( lo, hi);

		lo = h1->GetXaxis()->FindBin( theta_lo);
		hi = h1->GetXaxis()->FindBin( theta_hi);
		yld_ge = h1->Integral( lo, hi);

		eff = (double) yld_ge/yld_ev;
		deff = sqrt( yld_ge/Sqr( yld_ev) + Sqr( yld_ge)/pow( yld_ev, 3));

		cout.width(2);
		cout << i << " ";
		cout.width(7);
		cout << yld_ev << " ";
		cout.width(7);
		cout << yld_ge << " ";
		cout.width(10);
		cout.precision(4);
		cout << eff << " ";
		cout.precision(2);
		cout.width(10);
		cout << deff << endl;
		cout.precision(4);

		outFile.width(2);
		outFile << i << " ";
		outFile.width(7);
		outFile << yld_ev << " ";
		outFile.width(7);
		outFile << yld_ge << " ";
		outFile.width(10);
		outFile.precision(4);
		outFile << eff << " ";
		outFile.precision(2);
		outFile.width(10);
		outFile << deff << endl;
	}
	outFile.close();
}

void ThetaEffBatch( Int_t eg, Char_t tgt[2], Char_t cond[12])
{
	Int_t i, bins, yld_ev, yld_ge, lo, hi, theta_lo, theta_hi, binsize;
	Double_t eff, deff;
	Char_t name[128];

	bins = 9;
	binsize = 180/bins;

	sprintf( name, "~/geant/cb/cbsim/output/pi0/pi0_%s_%d.root", tgt, eg);
	TFile evgen( name);
	sprintf( name, "histograms/MonteCarlo/MCH_%s_%s_%d.root", tgt, cond, eg);
	TFile geant( name);

	sprintf( name, "h5");
	ev_hist = (TH1D*) evgen.Get( name);

	sprintf( name, "EmPi0_TGG_ThetaCM");
	ge_hist = (TH3D*) geant.Get( name);
	TH1D *h1 = ge_hist->Project3D("x");

	yld_ge = h1->Integral();
	yld_ev = ev_hist->Integral();
	eff = (double) yld_ge/yld_ev;
	deff = sqrt( yld_ge/Sqr( yld_ev) + Sqr( yld_ge)/pow( yld_ev, 3));

	sprintf(name, "xs/eff/det_eff_new/Eff_%s_%d.out", tgt, eg);
	ofstream outFile( name);
	outFile << " 0 ";
	outFile.width(7);
	outFile << yld_ev << " ";
	outFile.width(7);
	outFile << yld_ge << " ";
	outFile.width(10);
	outFile.precision(4);
	outFile << eff << " ";
	outFile.precision(2);
	outFile.width(10);
	outFile << deff << endl;

	for ( i = 1; i <= bins; i++) {
		theta_lo = (i-1)*binsize;
		theta_hi = i*binsize;

		lo = ev_hist->GetXaxis()->FindBin( theta_lo);
		hi = ev_hist->GetXaxis()->FindBin( theta_hi);
		yld_ev = ev_hist->Integral( lo, hi);

		lo = h1->GetXaxis()->FindBin( theta_lo);
		hi = h1->GetXaxis()->FindBin( theta_hi);
		yld_ge = h1->Integral( lo, hi);

		eff = (double) yld_ge/yld_ev;
		deff = sqrt( yld_ge/Sqr( yld_ev) + Sqr( yld_ge)/pow( yld_ev, 3));

		outFile.width(2);
		outFile << i << " ";
		outFile.width(7);
		outFile << yld_ev << " ";
		outFile.width(7);
		outFile << yld_ge << " ";
		outFile.width(10);
		outFile.precision(4);
		outFile << eff << " ";
		outFile.precision(2);
		outFile.width(10);
		outFile << deff << endl;
	}
	outFile.close();
}

void ThetaEffBatch2( Char_t tgt[2], Int_t eg, Char_t cond[12])
{
	Int_t i, bins, yld_ev, yld_ge, lo, hi, theta_lo, theta_hi, binsize;
	Double_t eff, deff;
	Char_t name[128];

	bins = 9;
	binsize = 180/bins;

	sprintf( name, "~/geant/cb/cbsim/output/pi0/pi0_%s_%d_%s.root", tgt, eg,
			cond);
	TFile evgen( name);
	sprintf( name, "histograms/MonteCarlo/MCH_%s_%d_%s.root", tgt, eg, cond);
	TFile geant( name);

	sprintf( name, "h5");
	ev_hist = (TH1D*) evgen.Get( name);

	sprintf( name, "EmPi0_TGG_ThetaCM");
	ge_hist = (TH3D*) geant.Get( name);
	TH1D *h1 = ge_hist->Project3D("x");

	yld_ge = h1->Integral();
	yld_ev = ev_hist->Integral();
	eff = (double) yld_ge/yld_ev;
	deff = sqrt( yld_ge/Sqr( yld_ev) + Sqr( yld_ge)/pow( yld_ev, 3));

	sprintf(name, "xs/eff/det_eff_new/Eff_%s_%d_%s.out", tgt, eg, cond);
	ofstream outFile( name);
	outFile << " 0 ";
	outFile.width(7);
	outFile << yld_ev << " ";
	outFile.width(7);
	outFile << yld_ge << " ";
	outFile.width(10);
	outFile.precision(4);
	outFile << eff << " ";
	outFile.precision(2);
	outFile.width(10);
	outFile << deff << endl;

	for ( i = 1; i <= bins; i++) {
		theta_lo = (i-1)*binsize;
		theta_hi = i*binsize;

		lo = ev_hist->GetXaxis()->FindBin( theta_lo);
		hi = ev_hist->GetXaxis()->FindBin( theta_hi);
		yld_ev = ev_hist->Integral( lo, hi);

		lo = h1->GetXaxis()->FindBin( theta_lo);
		hi = h1->GetXaxis()->FindBin( theta_hi);
		yld_ge = h1->Integral( lo, hi);

		eff = (double) yld_ge/yld_ev;
		deff = sqrt( yld_ge/Sqr( yld_ev) + Sqr( yld_ge)/pow( yld_ev, 3));

		outFile.width(2);
		outFile << i << " ";
		outFile.width(7);
		outFile << yld_ev << " ";
		outFile.width(7);
		outFile << yld_ge << " ";
		outFile.width(10);
		outFile.precision(4);
		outFile << eff << " ";
		outFile.precision(2);
		outFile.width(10);
		outFile << deff << endl;
	}
	outFile.close();
}

void ThetaEffCompAll( Int_t e_lo = 200, Int_t e_hi = 300)
{
	for ( Int_t eg = e_lo; eg <= e_hi; eg += 10) ThetaEffComp( eg);
}

void ThetaEffComp( Int_t eg, TString tgt = "p")
{
	Int_t i, bins, yld_ev, yld_ge, lo, hi, theta_lo, theta_hi, binsize;
	Double_t max, t_eff, dt_eff;
	Double_t th[9], dth[9], eff[9], deff[9];
	TString name;

	c1 = new TCanvas( "canvas", "Set-Up Efficiency", 200, 0, 1000, 800);
	c1->Divide(2,2);
	gStyle->SetOptStat(0);

	bins = 9;
	binsize = 180/bins;

	name = Form( "evgen/comp_%s_%d_in.root", (const char*) tgt, eg);
	evgen = new TFile( name);
	name = Form( "histograms/MCH_comp_%s_%d.root", (const char*) tgt, eg);
	geant = new TFile( name);

// Event Generator

	name = "h2";
	ev_h = (TH1D*) evgen->Get( name);
	ev_h->SetFillStyle(3001);
	ev_h->SetFillColor(18);
	ev_h->SetLineWidth(2);

// Gamma ONLY

	name = "MMissPhot_Theta_TChan_P";
	ge_h3 = (TH3D*) geant->Get( name);
	TH1D *ge_h = ge_h3->Project3D("y");
	ge_h->SetFillColor(9);
	ge_h->SetLineWidth(2);

	name = "Photon Only";
	c1->cd(1);
	if ( ev_h->GetMaximum() > ge_h->GetMaximum()) {
		max = ev_h->GetMaximum();
		max *= 1.30;
		ev_h->SetMaximum(max);
		ev_h->SetTitle( name);
		ev_h->Draw();
		ev_h->GetXaxis()->SetTitle("#theta_{CM} (deg)");

		ge_h->Draw("same");
	}
	else {
		max = ge_h->GetMaximum();
		max *= 1.30;
		ge_h->SetMaximum(max);
		ge_h->SetTitle( name);
		ge_h->Draw();
		ge_h->GetXaxis()->SetTitle("#theta_{CM} (deg)");

		ev_h->Draw("same");
	}
	tl = new TLegend( 0.6, 0.7, 0.8, 0.85);
	tl->SetFillStyle(0);
	tl->SetBorderSize(0);
	tl->SetTextSize(0.04);
	tl->AddEntry( ev_h, "Event Generator");
	tl->AddEntry( ge_h, "Analysed");
	tl->Draw();

	name = Form( "E_{#gamma} = %3d MeV\n", eg);
	pl = new TPaveLabel( 0.4, 0.9, 0.6, 0.99, name, "NDC");
	pl->SetBorderSize(0);
	pl->SetFillStyle(0);
//	pl->SetTextAlign(12);
	pl->SetTextSize(0.4);
	pl->Draw();

	yld_ge = ge_h->Integral();
	yld_ev = ev_h->Integral();
	t_eff = (double) yld_ge/yld_ev;
	dt_eff = sqrt( yld_ge/Sqr( yld_ev) + Sqr( yld_ge)/pow( yld_ev, 3));

	cout << " tot ";
	cout << yld_ge;
	cout << " ";
	cout << yld_ev;
	cout << " ";
	cout << t_eff;
	cout << endl;

	Double_t evc, gec;
	evc = 0;
	gec = 0;

	for ( i = 0; i < bins; i++) {
		theta_lo = i*binsize;
		theta_hi = (i+1)*binsize;

		lo = ev_h->GetXaxis()->FindBin( theta_lo);
		hi = ev_h->GetXaxis()->FindBin( theta_hi)-1;
		yld_ev = ev_h->Integral( lo, hi);

		evc += yld_ev;

		lo = ge_h->GetXaxis()->FindBin( theta_lo);
		hi = ge_h->GetXaxis()->FindBin( theta_hi)-1;
		yld_ge = ge_h->Integral( lo, hi);

		gec += yld_ge;

		th[i] = (theta_lo+theta_hi)/2;
		dth[i] = 0;
		eff[i] = (double) yld_ge/yld_ev;
		deff[i] = sqrt( yld_ge/Sqr( yld_ev) + Sqr( yld_ge)/pow( yld_ev, 3));
		cout << th[i];
		cout << "  ";
		cout << yld_ev;
		cout << "  ";
		cout << yld_ge;
		cout << "  ";
		cout << eff[i];
		cout << endl;
	}
//	cout << " check ";
//	cout << gec;
//	cout << " ";
//	cout << evc;
//	cout << " ";
//	cout << gec/evc;
//	cout << endl;

/*
	// Output g only efficiencies
	name = Form( "efficiency/Eff_comp_g_%s_%d.out", (const char*) tgt, eg);
	ofstream outFile( name);
	outFile << " 0 ";
	outFile.width(7);
	outFile << yld_ev << " ";
	outFile.width(7);
	outFile << yld_ge << " ";
	outFile.width(10);
	outFile.precision(4);
	outFile << eff << " ";
	outFile.precision(2);
	outFile.width(10);
	outFile << deff << endl;

	for ( i = 1; i <= bins; i++) {
		outFile.width(2);
		outFile << i << " ";
		outFile.width(7);
		outFile << yld_ev << " ";
		outFile.width(7);
		outFile << yld_ge << " ";
		outFile.width(10);
		outFile.precision(4);
		outFile << eff[i] << " ";
		outFile.precision(2);
		outFile.width(10);
		outFile << deff[i] << endl;
	}
	outFile.close();
*/

// Gamma AND Proton

	c1->cd(2);
	gr = new TGraphErrors( bins, th, eff, dth, deff);
	gr->SetTitle();
	gr->SetMarkerStyle( 20);
	gr->SetMarkerSize( 1.0);
	gr->SetMarkerColor( 4);
	gr->GetXaxis()->SetTitle("#theta_{CM} (deg)");
	gr->GetYaxis()->SetTitle("#varepsilon_{#gamma'}");
	gr->GetXaxis()->SetRangeUser(0,180);
	gr->GetYaxis()->SetRangeUser(0,1.4);
	gr->Draw("AP");

	l1 = new TLine(0,1,180,1);
	l1->SetLineStyle(2);
	l1->SetLineWidth(1);
	l1->Draw();

	name = "MMissPhot_Theta_TChan_CutP";
	ge_h3cut = (TH3D*) geant->Get( name);
	TH1D *ge_h2 = ge_h3cut->Project3D("y");
	ge_h2->SetFillColor(9);
	ge_h2->SetLineWidth(2);

	name = "Photon and Proton";
	c1->cd(3);
	if ( ev_h->GetMaximum() > ge_h2->GetMaximum()) {
		max = ev_h->GetMaximum();
		max *= 1.30;
		ev_h->SetMaximum(max);
		ev_h->SetTitle(name);
		ev_h->GetXaxis()->SetTitle("#theta_{CM} (deg)");
		ev_h->Draw();

		ge_h2->Draw("same");
	}
	else {
		max = ge_h2->GetMaximum();
		max *= 1.30;
		ge_h2->SetMaximum(max);
		ge_h2->SetTitle(name);
		ge_h2->GetXaxis()->SetTitle("#theta_{CM} (deg)");
		ge_h2->Draw();

		ev_h->Draw("same");
	}

	yld_ge = ge_h2->Integral();
	yld_ev = ev_h->Integral();
	t_eff = (double) yld_ge/yld_ev;
	dt_eff = sqrt( yld_ge/Sqr( yld_ev) + Sqr( yld_ge)/pow( yld_ev, 3));

	cout << endl;
	cout << " tot ";
	cout << yld_ge;
	cout << " ";
	cout << yld_ev;
	cout << " ";
	cout << t_eff;
	cout << endl;

	evc = 0;
	gec = 0;
	for ( i = 0; i < bins; i++) {
		theta_lo = i*binsize;
		theta_hi = (i+1)*binsize;

		lo = ev_h->GetXaxis()->FindBin( theta_lo);
		hi = ev_h->GetXaxis()->FindBin( theta_hi)-1;
		yld_ev = ev_h->Integral( lo, hi);

		evc += yld_ev;

		lo = ge_h2->GetXaxis()->FindBin( theta_lo);
		hi = ge_h2->GetXaxis()->FindBin( theta_hi)-1;
		yld_ge = ge_h2->Integral( lo, hi);

		gec += yld_ge;

		th[i] = (theta_lo+theta_hi)/2;
		dth[i] = 0;
		eff[i] = (double) yld_ge/yld_ev;
		deff[i] = sqrt( yld_ge/Sqr( yld_ev) + Sqr( yld_ge)/pow( yld_ev, 3));
		cout << th[i];
		cout << "  ";
		cout << yld_ev;
		cout << "  ";
		cout << yld_ge;
		cout << "  ";
		cout << eff[i];
		cout << endl;
	}
//	cout << " check ";
//	cout << gec;
//	cout << " ";
//	cout << evc;
//	cout << " ";
//	cout << gec/evc;
//	cout << endl;

	c1->cd(4);
	gr2 = new TGraphErrors( bins, th, eff, dth, deff);
	gr2->SetTitle();
	gr2->SetMarkerStyle( 20);
	gr2->SetMarkerSize( 1.0);
	gr2->SetMarkerColor( 4);
	gr2->GetXaxis()->SetTitle("#theta_{CM} (deg)");
	gr2->GetYaxis()->SetTitle("#varepsilon_{#gamma'}");
	gr2->GetXaxis()->SetRangeUser(0,180);
	gr2->GetYaxis()->SetRangeUser(0,1.4);
	gr2->Draw("AP");

	l1->Draw();

	// Output g + p efficiencies
//	name = Form( "efficiency/Eff_comp_gp_%s_%d.out", (const char*) tgt, eg);
	name = Form( "efficiency/eff_%d.dat", eg);
	ofstream outFile( name);

	for ( i = 0; i < bins; i++) {
		outFile.width(2);
		outFile << 10+i*20;
		outFile << " ";
		outFile.precision(4);
		outFile << eff[i];
		outFile << " ";
//		outFile.precision(2);
//		outFile.width(10);
//		outFile << deff[i];
		outFile << endl;
	}
	outFile.close();

	name = Form( "efficiency/comp_teff_%d.pdf", eg);
	c1->Print( name);
}
